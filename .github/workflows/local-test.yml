# For local usage instructions see test/README.md (act prerequisites, secrets, run command)

name: Local Composite Action Test
on:
  workflow_dispatch:
  push:
    branches: [ local-test ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository 
      - name: Checkout repository
        uses: actions/checkout@v4



      # Install .NET runtime
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x
      
      # Install Java runtime (only needed if you want to run the offical HL7 Java validator)
      - name: Setup Java JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'microsoft'
          java-version: '21'

      # Setup Node.js (needed for SUSHI) - required when using the smaller act image mapping
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Local act workaround: ensure global npm directory exists so action's SUSHI install (which chowns then installs) succeeds on minimal images
      - name: Prepare global npm dir for SUSHI (local only)
        run: |
          sudo mkdir -p /usr/local/lib/node_modules
          sudo chown -R $USER /usr/local/lib/node_modules
          # Ensure sudo can find node, npm, npx (actions/setup-node puts them outside root's default PATH)
          NODE_BIN_DIR=$(dirname $(which node))
          for bin in node npm npx; do
            if command -v $bin >/dev/null 2>&1; then
              TARGET=$(which $bin)
              if [ ! -e /usr/local/bin/$bin ]; then
                sudo ln -s "$TARGET" /usr/local/bin/$bin
              fi
            else
              echo "Warning: $bin not found in user PATH during symlink setup";
            fi
          done
          echo "Symlinked node tooling for sudo:"
          ls -l /usr/local/bin/node /usr/local/bin/npm /usr/local/bin/npx 2>/dev/null || true
          ls -ld /usr/local/lib/node_modules
        shell: bash

      # Pre-install Firely Terminal (defensive to ensure availability under act minimal image)
      - name: Preinstall Firely Terminal
        run: |
          set -e
          echo "DOTNET VERSION:" $(dotnet --version)
          if ! command -v fhir >/dev/null 2>&1; then
            dotnet tool install --global Firely.Terminal --version 3.4.0
          else
            echo "Firely.Terminal already present: $(fhir -v | tr '\n' ' ')" || true
          fi
          # Ensure path for following steps
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"
          echo "Resolved fhir path: $(command -v fhir || echo 'not found')"
        shell: bash

        
      # Prepare test content: copy everything from test/R4/ into workspace root for R4 testing
      - name: Copy R4 test harness content
        run: |
          echo "Copying R4 test harness files from ./test/R4 into workspace root..."
          if [ ! -d test/R4 ]; then
            echo "No test/R4/ directory found after checkout. If running under act and you expected local uncommitted test data, ensure checkout step is skipped (env ACT is: ${ACT:-unset}).";
            echo "Contents of workspace root:"; ls -1; exit 0;
          fi
          shopt -s dotglob nullglob
          for f in test/R4/*; do
            if [ -e "$f" ]; then
              if [ -d "$f" ]; then
                echo "Syncing directory $f -> ${f#test/R4/}";
                rsync -a --delete "$f/" "${f#test/R4/}/" 2>/dev/null || cp -R "$f" .
              else
                echo "Copying file $f -> ${f#test/R4/}";
                cp -f "$f" "${f#test/R4/}"
              fi
            fi
          done
          echo "Workspace root now contains:"; ls -1
        shell: bash        
       
      # Run local version of the composite action under development
      - name: Firely.Terminal (Local) R4 Validation
        uses: ./
        with:
          PATH_TO_CONFORMANCE_RESOURCES: fsh-generated/resources
          PATH_TO_EXAMPLES: fsh-generated/resources
          # If you add a minimal QC rules file under test/quality-control/minimal.rules.yaml you can enable this:
          # PATH_TO_QUALITY_CONTROL_RULES: quality-control/minimal
          DOTNET_VALIDATION_ENABLED: true
          JAVA_VALIDATION_ENABLED: true
          JAVA_VALIDATION_OPTIONS: -show-message-ids -advisor-file input/validation-advisor-file.txt -display-issues-are-warnings -best-practice ignore -allow-example-urls true
          EXPECTED_FAILS: VALIDATION_CONFORMANCE_DOTNET VALIDATION_CONFORMANCE_JAVA VALIDATION_EXAMPLES_JAVA
          SIMPLIFIER_USERNAME: ${{ secrets.SIMPLIFIER_USERNAME }}
          SIMPLIFIER_PASSWORD: ${{ secrets.SIMPLIFIER_PASSWORD }}
          SUSHI_ENABLED: true
          FIRELY_TERMINAL_VERSION: 3.4.0
          ##JAVA_VALIDATOR_VERSION: 6.7.1
          FIRELY_TERMINAL_VALIDATOR_ENGINE: regular

      # Remove all R4 test content to prepare for STU3 testing
      - name: Clean up R4 test content
        run: |
          echo "Cleaning up all R4 test content..."
          # Remove all files and directories that were copied from test/R4/
          rm -rf fsh-generated input package.json sushi-config.yaml
          # Remove any other R4-specific artifacts
          rm -rf .fhir validation-results.json
          echo "Workspace root now contains:"; ls -1
        shell: bash

      # Prepare test content: copy everything from test/STU3/ into workspace root for STU3 testing
      - name: Copy STU3 test harness content
        run: |
          echo "Copying STU3 test harness files from ./test/STU3 into workspace root..."
          if [ ! -d test/STU3 ]; then
            echo "No test/STU3/ directory found after checkout. If running under act and you expected local uncommitted test data, ensure checkout step is skipped (env ACT is: ${ACT:-unset}).";
            echo "Contents of workspace root:"; ls -1; exit 0;
          fi
          shopt -s dotglob nullglob
          for f in test/STU3/*; do
            if [ -e "$f" ]; then
              if [ -d "$f" ]; then
                echo "Syncing directory $f -> ${f#test/STU3/}";
                rsync -a --delete "$f/" "${f#test/STU3/}/" 2>/dev/null || cp -R "$f" .
              else
                echo "Copying file $f -> ${f#test/STU3/}";
                cp -f "$f" "${f#test/STU3/}"
              fi
            fi
          done
          echo "Workspace root now contains:"; ls -1
        shell: bash


      # Run local version of the composite action under development
      - name: Firely.Terminal (Local) STU3 Validation
        uses: ./
        with:
          PATH_TO_CONFORMANCE_RESOURCES: input/resources
          PATH_TO_EXAMPLES: input/resources
          #PATH_TO_QUALITY_CONTROL_RULES: unittest
          DOTNET_VALIDATION_ENABLED: false
          JAVA_VALIDATION_ENABLED: true
          JAVA_VALIDATION_OPTIONS: -show-message-ids -display-issues-are-warnings -best-practice ignore -allow-example-urls true
          EXPECTED_FAILS: VALIDATION_CONFORMANCE_JAVA VALIDATION_EXAMPLES_JAVA
          SIMPLIFIER_USERNAME: ${{ secrets.SIMPLIFIER_USERNAME }}
          SIMPLIFIER_PASSWORD: ${{ secrets.SIMPLIFIER_PASSWORD }}
          SUSHI_ENABLED: false
          FIRELY_TERMINAL_VERSION: 3.4.0
          ##JAVA_VALIDATOR_VERSION: 6.6.7
          FIRELY_TERMINAL_VALIDATOR_ENGINE: regular
